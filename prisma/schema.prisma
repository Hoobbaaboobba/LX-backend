generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    LEXUS
    ADMIN
    MEMBER
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String
    email    String  @unique
    password String?

    githubId     String? @unique
    githubAvatar String?

    role     UserRole     @default(MEMBER)
    projects Project[]    @relation("UserProjects")
    tasks    Task[]
    teams    TeamMember[]

    @@map("users")
}

model Project {
    id String @id @default(uuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title    String
    progress Int      @default(0)
    dueDate  DateTime @default(now())
    users    User[]   @relation("UserProjects")
    tasks    Task[]

    @@map("projects")
}

enum Priority {
    LOW
    MEDIUM
    HIGH
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    DONE
}

model Task {
    id String @id @default(uuid())

    title       String
    description String
    priority    Priority
    status      TaskStatus @default(TODO)
    project     Project    @relation(fields: [projectId], references: [id])
    projectId   String
    dueDate     DateTime   @default(now())
    progress    Int        @default(0)

    assignee   User?   @relation(fields: [assigneeId], references: [id])
    assigneeId String?

    @@map("tasks")
}

model Team {
    id        String   @id @default(uuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    members TeamMember[]
    sites   Site[]

    teamInvites TeamInvite[]

    @@map("teams")
}

enum TeamMemberRole {
    ADMIN
    MEMBER
}

model TeamMember {
    id     String         @id @default(uuid())
    userId String
    teamId String
    role   TeamMemberRole @default(MEMBER)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@unique([userId, teamId])
    @@map("team_members")
}

model TeamInvite {
    id     String @id @default(uuid())
    teamId String
    team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

    token     String?        @unique
    role      TeamMemberRole @default(MEMBER)
    expiresAt DateTime?
    createdAt DateTime       @default(now())

    @@map("team_invites")
}

model Site {
    id     String @id @default(uuid())
    name   String
    domain String @default(uuid())

    teamId String
    team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("sites")
}
